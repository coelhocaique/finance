openapi: 3.0.1
info:
  title: Personal Finance API
  description: APIs to control your personal finance
  version: 1.0.0
servers:
  - url: 'http://localhost:8081/v1'
tags:
  - name: debt
    description: Control everything you spend
  - name: recurring-debt
    description: Add debts that shoud be renewed every month
  - name: income
    description: Control all the money you make
  - name: parameter
    description: You can also use custom parameters with reference date
  - name: custom-attribute
    description: Use custom attributes to create static data
paths:
  /debt:
    post:
      tags:
        - debt
      summary: Add a new debt or something you've spent
      operationId: create-debt
      requestBody:
        description: Data needed to create a new debt
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DebtRequest'
        required: true
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DebtResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content: 
            application/json:
              schema:
                  $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Error'
      security:
        - auth_account_id: []
    get:
      tags:
        - debt
      summary: Finds debts
      description: At least one filter should be informed. Reference date(reference_date), date range (date_from and date_to) which should be in an YYYYMM (year and month) format. For example 202001 (January of 2020) or the debt reference code (UUID).
      operationId: find-debts
      parameters:
        - name: date_from
          in: query
          description: reference date from
          schema:
            type: string
            format: YYYYMM
        - name: date_to
          in: query
          description: reference date to
          schema:
            type: string
            format: YYYYMM
        - name: reference_date
          in: query
          description: reference date
          schema:
            type: string
            format: YYYYMM
        - name: reference_code
          in: query
          description: debt reference code
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DebtResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content: 
            application/json:
              schema:
                  $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Error'
      security:
        - auth_account_id: []
    delete:
      tags:
        - debt
      summary: Deletes by reference code
      description: Delete by reference code, that means all installments will be deleted
      operationId: delete-by-reference-code
      parameters:
        - name: reference_code
          in: query
          required: true
          description: reference date
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: successful operation
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content: 
            application/json:
              schema:
                  $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Error'
      security:
        - auth_account_id: []
  /debt/{id}:
    get:
      tags:
        - debt
      summary: Finds a debt by id
      description: Returns a single debt
      operationId: find-debt-by-id
      parameters:
        - name: id
          in: path
          description: ID of debt to return
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DebtRequest'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content: 
            application/json:
              schema:
                  $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Error'
      security:
        - auth_account_id: []
    delete:
      tags:
        - debt
      summary: Deletes a single debt
      operationId: delete-debt
      parameters:
        - name: id
          in: path
          description: ID of debt to delete
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: successful operation
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content: 
            application/json:
              schema:
                  $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - auth_account_id: []
  
  /recurring-debt:
    post:
      tags:
        - recurring-debt
      summary: Add a debt that should be renewed every month
      operationId: create-recurring-debt
      requestBody:
        description: Data needed to create a new recurring debt
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RecurringDebtRequest'
        required: true
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RecurringDebtResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content: 
            application/json:
              schema:
                  $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Error'
      security:
        - auth_account_id: []
    get:
      tags:
        - recurring-debt
      summary: Finds recurring debts
      description: At least one filter should be informed. Reference date(reference_date) or date range (date_from and date_to). All of them should be in an YYYYMM (year and month). For example 202001 (January of 2020)
      operationId: find-recurring-debts
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RecurringDebtResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content: 
            application/json:
              schema:
                  $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Error'
      security:
        - auth_account_id: []
  /recurring-debt/{id}:
    get:
      tags:
        - recurring-debt
      summary: Finds a recurring debt by id
      description: Returns a single recurring debt
      operationId: find-recurring-debt-by-id
      parameters:
        - name: id
          in: path
          description: ID of recurring debt to return
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecurringDebtResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content: 
            application/json:
              schema:
                  $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Error'
      security:
        - auth_account_id: []
    delete:
      tags:
        - recurring-debt
      summary: Deletes a recurring debt
      operationId: delete-recurring-debt
      parameters:
        - name: id
          in: path
          description: ID of recurring debt to delete
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: successful operation
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content: 
            application/json:
              schema:
                  $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - auth_account_id: []
  /income:
    post:
      tags:
        - income
      summary: Create a new income 
      operationId: create-income
      requestBody:
        description: Data needed to create a new income
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IncomeRequest'
        required: true
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/IncomeResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content: 
            application/json:
              schema:
                  $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Error'
      security:
        - auth_account_id: []
    get:
      tags:
        - income
      summary: Finds incomes
      description: At least one filter should be informed. Reference date(reference_date) or date range (date_from and date_to). All of them should be in an YYYYMM (year and month). For example 202001 (January of 2020)
      operationId: find-incomes
      parameters:
        - name: date_from
          in: query
          description: reference date from
          schema:
            type: string
            format: YYYYMM
        - name: date_to
          in: query
          description: reference date to
          schema:
            type: string
            format: YYYYMM
        - name: reference_date
          in: query
          description: reference date
          schema:
            type: string
            format: YYYYMM
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/IncomeResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content: 
            application/json:
              schema:
                  $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Error'
      security:
        - auth_account_id: []
  /income/{id}:
    get:
      tags:
        - income
      summary: Finds an income by id
      description: Returns a single income
      operationId: find-income-by-id
      parameters:
        - name: id
          in: path
          description: ID of income to return
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncomeResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content: 
            application/json:
              schema:
                  $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Error'
      security:
        - auth_account_id: []
    delete:
      tags:
        - income
      summary: Deletes an income
      operationId: delete-income
      description: Deletes a single income
      parameters:
        - name: id
          in: path
          description: ID of income to delete
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: successful operation
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content: 
            application/json:
              schema:
                  $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - auth_account_id: []

  /parameter:
    post:
      tags:
        - parameter
      summary: Creates a new parameter 
      operationId: create-parameter
      description: Parameters can be useful to control debt thresholds by month for example, where you can add a custom value you are allowed to spend every month. 
      requestBody:
        description: Data needed to create a new parameter
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ParameterRequest'
        required: true
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ParameterResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content: 
            application/json:
              schema:
                  $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Error'
      security:
        - auth_account_id: []
    get:
      tags:
        - parameter
      summary: Finds parameters
      description: At least one filter should be informed. Reference date(reference_date) or date range (date_from and date_to). All of them should be in an YYYYMM (year and month). For example 202001 (January of 2020)
      operationId: find-parameters
      parameters:
        - name: date_from
          in: query
          description: reference date from
          schema:
            type: string
            format: YYYYMM
        - name: date_to
          in: query
          description: reference date to
          schema:
            type: string
            format: YYYYMM
        - name: reference_date
          in: query
          description: reference date
          schema:
            type: string
            format: YYYYMM
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ParameterResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content: 
            application/json:
              schema:
                  $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Error'
      security:
        - auth_account_id: []
  /parameter/{id}:
    get:
      tags:
        - parameter
      summary: Finds a parameter by id
      description: Returns a single parameter
      operationId: find-parameter-by-id
      parameters:
        - name: id
          in: path
          description: ID of parameter to fetch
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParameterResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content: 
            application/json:
              schema:
                  $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Error'
      security:
        - auth_account_id: []
    delete:
      tags:
        - parameter
      summary: Deletes a parameter
      operationId: delete-parameter
      description: Deletes a single parameter
      parameters:
        - name: id
          in: path
          description: ID of parameter to delete
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: successful operation
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content: 
            application/json:
              schema:
                  $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - auth_account_id: []
        
  /custom-attribute:
    post:
      tags:
        - custom-attribute
      summary: Creates a new custom attribute 
      operationId: create-custom-attribute
      description: Custom attributes are very similar to Parameters but it is not controlled by reference date, so it is advised to be used for static contents, such as debt tags, debt types or income sources.  
      requestBody:
        description: Data needed to create a new custom attribute
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomAttributeRequest'
        required: true
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CustomAttributeResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content: 
            application/json:
              schema:
                  $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Error'
      security:
        - auth_account_id: []
    get:
      tags:
        - custom-attribute
      summary: Finds custom attributes
      description: Searches can be performed by property name or no parameters, where all custom attributes are returned 
      operationId: find-custom-attributes
      parameters:
        - name: property_name
          in: query
          description: the custom attribute property name
          schema:
            type: string
            format: YYYYMM
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CustomAttributeResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content: 
            application/json:
              schema:
                  $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Error'
      security:
        - auth_account_id: []
  /custom-attribute/{id}:
    delete:
      tags:
        - custom-attribute
      summary: Deletes a custom attribute
      operationId: delete-custom-attribute
      description: Deletes a single custom attribute
      parameters:
        - name: id
          in: path
          description: ID of custom attribute to delete
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: successful operation
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content: 
            application/json:
              schema:
                  $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - auth_account_id: []

components:
  schemas:
    DebtRequest:
      type: object
      properties:
        amount:
          type: number
          description: the debt total amount
          format: double
        description:
          type: string
          description: what did you spend with?
        debt_date:
          type: string
          description: the date this transaction happened
          format: date
        installments:
          type: integer
          description: did you split the payment? In how many installments are you paying?
        type:
          type: string
          description: was it in cash? credit card? ...
        tag:
          type: string
          description: Add a tag to your debt. housing, halth, sports...
        next_month:
          type: boolean
          description: whether this debt should be considered just next month or not
          default: false
    DebtResponse:
      type: object
      properties:
        debt_id:
          type: string
          format: uuid
        amount:
          type: number
          description: the debt total amount
          format: double
        description:
          type: string
          description: what did you spend with?
        debt_date:
          type: string
          description: the date this transaction happened
          format: date
        installment_number:
          type: number
          description: the installment number of the debt
        installments:
          type: integer
          description: total number of installments
        type:
          type: string
          description: debt type
        tag:
          type: string
          description: debt tag
        reference_code:
          type: string
          format: uuid
        reference_date:
          type: string 
          format: YYYYMM
        total_amount:
          type: number
          format: float
        creation_date:
          type: string
          format: date-time
        links:
          type: array
          items:
            $ref: '#/components/schemas/Link'
    RecurringDebtRequest:
      type: object
      properties:
        amount:
          type: number
          description: the debt total amount
          format: double
        description:
          type: string
          description: what did you spend with?
        type:
          type: string
          description: was it in cash? credit card? ...
        tag:
          type: string
          description: Add a tag to your debt. housing, halth, sports...
    RecurringDebtResponse:
      type: object
      properties:
        recurring_debt_id:
          type: string
          format: uuid
        amount:
          type: number
          description: the debt total amount
          format: double
        description:
          type: string
          description: what did you spend with?
        type:
          type: string
          description: debt type
        tag:
          type: string
          description: debt tag
        creation_date:
          type: string
          format: date-time
        links:
          type: array
          items:
            $ref: '#/components/schemas/Link'
    IncomeRequest:
      type: object
      properties:
        gross_amount:
          type: number
          description: the income gross amount
          format: double
        description:
          type: string
          description: what did you spend with?
        receipt_date:
          type: string
          description: the date you received the income
          format: date
        reference_date:
          type: string 
          format: YYYYMM
        source_name:
          type: string
          description: did you split the payment? In how many installments are you paying?
        discounts:
          type: array
          items:
            $ref: '#/components/schemas/Discount'
        additions:
          type: array
          items:
            $ref: '#/components/schemas/Addition'
    IncomeResponse:
      type: object
      properties:
        income_id:
          type: string
          format: uuid
        gross_amount:
          type: number
          description: the income gross amount
          format: double
        net_amount:
          type: number
          format: double
        additional_amount:
          type: number
          format: double
        discount_amount:
          type: number
          format: double
        description:
          type: string
          description: ???
        receipt_date:
          type: string
          description: the date you received the income
          format: date
        reference_date:
          type: string 
          format: YYYYMM
        source_name:
          type: string
          description: ??
        creation_date:
          type: string
          format: date-time
        discounts:
          type: array
          items:
            $ref: '#/components/schemas/Discount'
        additions:
          type: array
          items:
            $ref: '#/components/schemas/Addition'
        links:
          type: array
          items:
            $ref: '#/components/schemas/Link'
            
    ParameterRequest:
      type: object
      properties:
        name:
          type: string
          description: the name for the new parameter
        value:
          type: string
          description: the value for this parameter
        reference_date:
          type: string
          format: date
          description: the month it refers to
          
    ParameterResponse:
      type: object
      properties:
        parameter_id:
          type: string
          format: uuid
        name:
          type: string
          description: the parameter name
        value:
          type: string
          description: the parameter value
        reference_date:
          type: string
          format: YYYYMM
          description: the reference date the parameter refers to
        creation_date:
          type: string
          format: date-time
        links:
          type: array
          items:
            $ref: '#/components/schemas/Link'
            
    CustomAttributeRequest:
      type: object
      properties:
        property_name:
          type: string
          description: the name for the property
        value:
          type: string
          description: the value for this property
          
    CustomAttributeResponse:
      type: object
      properties:
        custom_attribute_id:
          type: string
          format: uuid
        property_name:
          type: string
          description: the custom atrribute property name
        value:
          type: string
          description: the custom atrribute property value
        creation_date:
          type: string
          format: date-time
        links:
          type: array
          items:
            $ref: '#/components/schemas/Link'
            
    Discount:
      type: object
      properties:
        amount:
          type: number
        description:
          type: string
    Addition:
      type: object
      properties:
        amount:
          type: number
        description:
          type: string
    
    Error:
      type: object
      properties:
        errors:
          type: array
          items:
            type: string
    Link:
      type: object
      properties:
        method:
          type: string
        href:
          type: string
    
  securitySchemes:
    auth_account_id:
      type: apiKey
      in: header
      name: Authorization
